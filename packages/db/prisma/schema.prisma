// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  username         String
  profilePicture   String?  
}

model Model {
    id             String @id @default(uuid())
    name           String
    userId         String
    type           ModelTypeEnum
    triggerWord    String?
    tensorPath     String?
    age            Int
    ethnicity      EhnicityTypeEnum
    eyeColor       EyeColorEnum
    bald           Boolean
    outputImages   OutputImages[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    falAiRequestId  String?
    zipUrl          String
    status        MoelTraningStatusEnum @default(Pending)
}

// model TraningImages {
//   id               String @id @default(uuid())
//   imageUrl         String //We are uploading list of images to s3 from frontend and then retrieving images from s3 as a link
//   //the reason why we are doing this is we cannot send that high mb/gb images to backend as it becomes slow.
//   modelId          String
//   model            Model   @relation(fields: [modelId], references: [id])
// }

model OutputImages {
  id               String @id @default(uuid())
  imageUrl         String
  modelId          String
  prompt           String
  status           OutputImagesEnum  @default(Pending)
  model            Model @relation(fields: [modelId], references: [id])
  userId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  falAiRequestId   String?
}  

model Packs {
  id               String @id @default(uuid())
  name             String
  prompts          PackPrompts[]
}

model PackPrompts {
  id               String @id @default(uuid())
  prompt           String
  packId           String
  packs            Packs @relation(fields: [packId], references: [id])
}

enum ModelTypeEnum {
  Man
  Woman
  Other
}

enum MoelTraningStatusEnum {
  Generated
  Failed
  Pending
}

enum OutputImagesEnum {
  Generated
  Failed
  Pending
}

enum EhnicityTypeEnum {
  Black
  white
  Asian_American   @map("Asian American")
  East_Asian       @map("East Asian") 
  South_East_Asian  @map("South East Asian")
  South_Asian      @map("South Asian")
  Middle_Eastern   @map("Middle Eastern")
  Pacific
  Hispanic
}

enum EyeColorEnum {
  Brown
  Blue
  Hazel
  Gray
}